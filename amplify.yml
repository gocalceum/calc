version: 1
applications:
  - frontend:
      phases:
        preBuild:
          commands:
            # Install Bun
            - curl -fsSL https://bun.sh/install | bash
            - export BUN_INSTALL="$HOME/.bun"
            - export PATH="$BUN_INSTALL/bin:$PATH"
            - bun --version
            
            # Install jq for JSON parsing (AWS CLI is pre-installed)
            - which jq || curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /tmp/jq && chmod +x /tmp/jq && export PATH="/tmp:$PATH"
            
            # Fetch secrets based on branch
            - |
              echo "Current branch: $AWS_BRANCH"
              if [ "$AWS_BRANCH" = "main" ]; then
                echo "Fetching production secrets from AWS Secrets Manager..."
                
                # Debug: Check AWS credentials
                echo "Checking AWS credentials..."
                aws sts get-caller-identity
                
                # Try to fetch secrets from AWS Secrets Manager
                echo "Attempting to fetch calceum/supabase secret..."
                SECRETS=$(aws secretsmanager get-secret-value --secret-id calceum/supabase --region eu-west-2 --query SecretString --output text 2>&1)
                
                if echo "$SECRETS" | grep -q "AccessDeniedException\|ResourceNotFoundException"; then
                  echo "Warning: Could not fetch secret from Secrets Manager: $SECRETS"
                  echo "Using environment variables from Amplify console..."
                  export VITE_SUPABASE_URL=${SUPABASE_URL}
                  export VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
                else
                  echo "Successfully fetched secrets from AWS Secrets Manager"
                  export VITE_SUPABASE_URL=$(echo "$SECRETS" | jq -r .supabase_url)
                  export VITE_SUPABASE_ANON_KEY=$(echo "$SECRETS" | jq -r .supabase_anon_key)
                fi
                
                # Fetch OAuth secrets if they exist (optional)
                OAUTH_SECRET=$(aws secretsmanager get-secret-value --secret-id calceum/oauth/google --region eu-west-2 --query SecretString --output text 2>/dev/null || echo "")
                if [ ! -z "$OAUTH_SECRET" ] && [ "$OAUTH_SECRET" != "" ]; then
                  export VITE_GOOGLE_CLIENT_ID=$(echo "$OAUTH_SECRET" | jq -r '.client_id // ""')
                fi
                
                # Set production environment
                export NODE_ENV=production
                export VITE_APP_ENV=production
              else
                echo "Using preview configuration for branch: $AWS_BRANCH"
                # For preview branches, use limited access (read-only)
                export VITE_SUPABASE_URL=${PREVIEW_SUPABASE_URL:-$SUPABASE_URL}
                export VITE_SUPABASE_ANON_KEY=${PREVIEW_SUPABASE_ANON_KEY:-$SUPABASE_ANON_KEY}
                export NODE_ENV=development
                export VITE_APP_ENV=preview
              fi
            
            # Debug: Show environment (without secrets)
            - |
              echo "Environment variables set:"
              echo "NODE_ENV=$NODE_ENV"
              echo "VITE_APP_ENV=$VITE_APP_ENV"
              echo "VITE_SUPABASE_URL is ${VITE_SUPABASE_URL:+set}"
              echo "VITE_SUPABASE_ANON_KEY is ${VITE_SUPABASE_ANON_KEY:+set}"
            
            # Install dependencies (already in frontend directory due to appRoot)
            - bun install --frozen-lockfile
            
        build:
          commands:
            - echo "Building frontend application..."
            - bun run build
            - echo "Build completed successfully!"
            
      artifacts:
        baseDirectory: dist
        files:
          - '**/*'
          
      cache:
        paths:
          - frontend/node_modules/**/*
          - ~/.bun/install/cache/**/*
          
    appRoot: frontend