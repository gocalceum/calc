#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîê Local Secrets Setup Script${NC}"
echo "================================"

# Check for AWS CLI
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI is required but not installed.${NC}"
    echo "Install it from: https://aws.amazon.com/cli/"
    exit 1
fi

# Check for jq
if ! command -v jq &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  jq is not installed. Installing...${NC}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        brew install jq
    else
        echo -e "${RED}Please install jq manually: https://stedolan.github.io/jq/download/${NC}"
        exit 1
    fi
fi

# Set AWS region
AWS_REGION=${AWS_REGION:-eu-west-2}
echo -e "${GREEN}Using AWS Region: ${AWS_REGION}${NC}"

# Function to fetch and write secrets
fetch_secret() {
    local secret_id=$1
    local env_file=$2
    local prefix=$3
    
    echo -e "${YELLOW}Fetching secret: ${secret_id}...${NC}"
    
    SECRETS=$(aws secretsmanager get-secret-value \
        --secret-id "$secret_id" \
        --region "$AWS_REGION" \
        --query SecretString \
        --output text 2>/dev/null || echo "")
    
    if [ -z "$SECRETS" ]; then
        echo -e "${RED}‚ö†Ô∏è  Secret ${secret_id} not found or not accessible${NC}"
        return 1
    fi
    
    # Convert JSON to environment variables
    echo "$SECRETS" | jq -r "to_entries[] | \"${prefix}\(.key | ascii_upcase)=\(.value)\"" >> "$env_file"
    
    echo -e "${GREEN}‚úì Added $(echo "$SECRETS" | jq -r 'keys | length') variables from ${secret_id}${NC}"
    return 0
}

# Determine environment
echo ""
echo "Select environment:"
echo "1) Development (local)"
echo "2) Production (testing locally with prod data - BE CAREFUL!)"
read -p "Enter choice [1-2]: " choice

case $choice in
    1)
        ENV="development"
        ENV_FILE=".env.local"
        ;;
    2)
        ENV="production"
        ENV_FILE=".env.production.local"
        echo -e "${RED}‚ö†Ô∏è  WARNING: Using production secrets locally!${NC}"
        read -p "Are you sure? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
            echo "Aborted."
            exit 0
        fi
        ;;
    *)
        echo -e "${RED}Invalid choice${NC}"
        exit 1
        ;;
esac

# Backup existing env file
if [ -f "$ENV_FILE" ]; then
    cp "$ENV_FILE" "${ENV_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
    echo -e "${GREEN}‚úì Backed up existing ${ENV_FILE}${NC}"
fi

# Start fresh
echo "# Generated by setup-local-secrets.sh on $(date)" > "$ENV_FILE"
echo "# Environment: $ENV" >> "$ENV_FILE"
echo "" >> "$ENV_FILE"

# Fetch Supabase secrets
if fetch_secret "calceum/supabase" "$ENV_FILE" "VITE_"; then
    # Also add non-VITE versions for server use
    fetch_secret "calceum/supabase" "$ENV_FILE" "" || true
fi

# Fetch app config (if it exists)
fetch_secret "calceum/app-config" "$ENV_FILE" "" || true

# Fetch OAuth secrets (optional)
echo ""
read -p "Fetch OAuth secrets? (y/n): " fetch_oauth
if [ "$fetch_oauth" = "y" ]; then
    fetch_secret "calceum/oauth/google" "$ENV_FILE" "VITE_GOOGLE_" || true
    fetch_secret "calceum/oauth/apple" "$ENV_FILE" "VITE_APPLE_" || true
fi

# Add local development overrides
if [ "$ENV" = "development" ]; then
    echo "" >> "$ENV_FILE"
    echo "# Local Development Overrides" >> "$ENV_FILE"
    echo "NODE_ENV=development" >> "$ENV_FILE"
    echo "VITE_APP_ENV=development" >> "$ENV_FILE"
fi

# Summary
echo ""
echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}‚úÖ Setup Complete!${NC}"
echo ""
echo -e "Environment file: ${GREEN}${ENV_FILE}${NC}"
echo -e "Total variables: ${GREEN}$(grep -c "=" "$ENV_FILE" || echo 0)${NC}"
echo ""
echo -e "${YELLOW}Important:${NC}"
echo "1. Never commit ${ENV_FILE} to git"
echo "2. The file is already in .gitignore"
echo "3. Run 'bun run dev' to start with these settings"
echo ""

# Verify critical variables
if ! grep -q "VITE_SUPABASE_URL" "$ENV_FILE"; then
    echo -e "${RED}‚ö†Ô∏è  Warning: VITE_SUPABASE_URL not found!${NC}"
    echo "You may need to create the calceum/supabase secret in AWS Secrets Manager"
fi

if ! grep -q "VITE_SUPABASE_ANON_KEY" "$ENV_FILE"; then
    echo -e "${RED}‚ö†Ô∏è  Warning: VITE_SUPABASE_ANON_KEY not found!${NC}"
    echo "You may need to create the calceum/supabase secret in AWS Secrets Manager"
fi