name: Database Migration

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/database-migration.yml'
  workflow_dispatch: # Allow manual trigger

env:
  SUPABASE_PROJECT_ID: ducrwfvylwdaqpwfbdub

jobs:
  check-migrations:
    name: Check Migration Status
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for migration changes
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "supabase/migrations/"; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Found migration changes"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No migration changes"
          fi

  apply-migrations:
    name: Apply Migrations to Production
    runs-on: ubuntu-latest
    needs: check-migrations
    if: needs.check-migrations.outputs.has-changes == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Apply migrations to Supabase Cloud
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Link to the remote project
          supabase link --project-ref ${{ env.SUPABASE_PROJECT_ID }}
          
          # Push migrations to production
          supabase db push --password $SUPABASE_DB_PASSWORD
          
          # Optional: Run any seed data for production
          # supabase db seed
      
      - name: Verify migration status
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase migration list --project-ref ${{ env.SUPABASE_PROJECT_ID }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: apply-migrations
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.apply-migrations.result }}" == "success" ]; then
            echo "✅ Database migrations applied successfully"
          else
            echo "❌ Database migration failed"
            exit 1
          fi